using System;

public class Solution {
    public int DFS(int[,] board, int[] now, int[] next)
    {
        int[,] direction = new int[4,2]{{0,1},{1,0},{0,-1},{-1,0}};
        int[] temp = new int[2];
        int result = 0;
        
        if(board[now[0],now[1]] == 0 || board[next[0],next[1]] == 0)
            return 0;
        
        for(int i = 0 ; i < 4 ; i++)
        {
            temp[0] = now[0] + direction[i,0];
            temp[1] = now[1] + direction[i,1];

            if(0 > temp[0] || temp[0] > board.GetLength(0)-1||
               0 > temp[1] || temp[1] > board.GetLength(1)-1||
               board[temp[0],temp[1]] == 0)
                continue;
            
            board[now[0],now[1]] = 0;
            int count = DFS(board, next, temp)+1;
            board[now[0],now[1]] = 1;            
            
            if(result % 2 == 0 && count % 2 == 1)
                result = count;
            else if(result % 2 == 0 && count % 2 == 0)
                result = Math.Max(result,count);
            else if(result % 2 == 1 && count % 2 == 1)
                result = Math.Min(result,count);
        }
                
        return result;
    }
    
    public int solution(int[,] board, int[] aloc, int[] bloc) {
        int answer = -1;
        
        answer = DFS(board, aloc, bloc);        
        
        return answer;
    }
}