using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {    
    public int solution(int n, int[,] wires) {
        int answer = n;
        List<int> list= new List<int>();
        Queue<int> queue = new Queue<int>();
        
        for(int wireMaskIndex = 0 ; wireMaskIndex < wires.GetLength(0) ; wireMaskIndex++)
        {
            int[] count = new int[n];
            
            for(int startTowerIndex = 1 ; startTowerIndex <= n ; startTowerIndex++)
            {
                bool[] towerMask = new bool[wires.Length];
                queue.Enqueue(startTowerIndex);
                towerMask[startTowerIndex-1] = true;        
                count[startTowerIndex-1]++;
                while(queue.Count>0)
                {
                    int wire = queue.Dequeue();

                    for(int i = 0 ; i < wires.GetLength(0); i++)
                    {
                        if(i == wireMaskIndex)
                            continue;
                        
                        if(wire==wires[i,0]&&towerMask[wires[i,1]-1]==false)
                        {
                            queue.Enqueue(wires[i,1]);
                            towerMask[wires[i,1]-1] = true;
                            count[startTowerIndex-1]++;
                        }
                        else if(wire==wires[i,1]&&towerMask[wires[i,0]-1]==false)
                        {
                            queue.Enqueue(wires[i,0]);
                            towerMask[wires[i,0]-1] = true;
                            count[startTowerIndex-1]++;                        
                        }
                    }

                }            
            }
            int[] gap = count.Distinct().OrderByDescending(x=>x).ToArray();

            if(gap.Length == 1)
            {
                answer = 0;
                break;
            }
            else if(answer > gap[0]-gap[1])            
                answer = gap[0] - gap[1];            
        }        
        
        return answer;
    }
}