using System;
using System.Collections.Generic;
using System.Linq;

public class Solution {
    public int solution(int n, int start, int end, int[,] roads, int[] traps) {
        int answer = 0;
        bool[] onTraps = new bool[n+1];
        int[,] counts = new int[n+1,2];

        Dictionary<int, List<Tuple<int, int>>> frontRoads = new Dictionary<int, List<Tuple<int, int>>>(n);
        Dictionary<int, List<Tuple<int, int>>> backRoads = new Dictionary<int, List<Tuple<int, int>>>(n);
        for(int i = 1 ; i <= n; i++)
        {
            frontRoads.Add(i,new List<Tuple<int, int>>());
            backRoads.Add(i,new List<Tuple<int, int>>());
        }
        for(int i = 0 ; i < roads.GetLength(0) ; i++)
        {
            frontRoads[roads[i,0]].Add(new Tuple<int, int>(roads[i,1],roads[i,2]));
            backRoads[roads[i,1]].Add(new Tuple<int, int>(roads[i,0],roads[i,2]));
        }

        Queue<(int, int, bool[])> queue = new Queue<(int, int, bool[])>();                                             
        queue.Enqueue((start,0, onTraps));
        while(queue.Count > 0)
        {
            (int now, int count, bool[] onTrap) = queue.Dequeue();

            if(answer < count && answer != 0)
                continue;

            if(now == end)
            {
                answer = count;
                continue;
            }

            if(traps.Contains(now))
            {
                onTrap = (bool[])onTrap.Clone();
                onTrap[now] = !onTrap[now];
            }

            foreach(Tuple<int, int> tuple in frontRoads[now])
            {
                if(onTrap[now] ^ onTrap[tuple.Item1])
                    continue;
                if(counts[tuple.Item1,1] < count+tuple.Item2 && counts[tuple.Item1,0] != 0 && counts[tuple.Item1,1] != 0)
                    continue;

                counts[tuple.Item1,0] = count+tuple.Item2;
                queue.Enqueue((tuple.Item1,count+tuple.Item2,onTrap));
            }

            foreach(Tuple<int, int> tuple in backRoads[now])
            {
                if(!(onTrap[now] ^ onTrap[tuple.Item1]))
                    continue;
                if(counts[tuple.Item1,0] < count+tuple.Item2 && counts[tuple.Item1,0] != 0 && counts[tuple.Item1,1] != 0)
                    continue;

                counts[tuple.Item1,1] = count+tuple.Item2;
                queue.Enqueue((tuple.Item1,count+tuple.Item2,onTrap));
            }
        }
}