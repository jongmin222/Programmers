#include <string>
#include <vector>
#include <algorithm>
#include <stack>
#include <deque>

using namespace std;

bool Compare(vector<int> a, vector<int> b)
{    
    return a[0] < b[0];
}

vector<int> Preorder(const vector<vector<int>>& nodeinfo)
{
    vector<int> result;
    deque<tuple<int,int,int>> d;
    vector<int> mask(nodeinfo.size()+1, 0);
    
    d.push_front({nodeinfo[0][0],nodeinfo[0][1],nodeinfo[0][2]});
    
    for(int i = 1 ; i < nodeinfo.size(); ++i)
    {
        int x = nodeinfo[i][0];
        int y = nodeinfo[i][1];
        int node = nodeinfo[i][2];
        
        if(get<1>(d.front()) < y)
        {
            d.push_front({x,y,node});
        }
        else
        {
            vector<tuple<int,int,int>> temp;
            
            while(!d.empty())
            {                
                if(get<1>(d.back()) >= y)
                    break;
                
                if(!(get<0>(d.front()) < get<0>(d.back()) && get<0>(d.back()) < x))
                    break;
                
                if(mask[get<2>(d.back())] >= y)
                    break;
                
                temp.push_back(d.back());
                d.pop_back();
            }
            d.push_back({x,y,node});
            
            for(int i = temp.size()-1 ; i >= 0 ; --i)
            {
                mask[get<2>(temp[i])] = y;
                d.push_back(temp[i]);
            }
        }
    }
    
    while(!d.empty())
    {
        result.push_back(get<2>(d.front()));
        d.pop_front();        
    }
    
    return result;
}
vector<int> Postorder(const vector<vector<int>>& nodeinfo)
{
    vector<int> result;
    stack<pair<int, int>> s;
    vector<int> mask(nodeinfo.size()+1, 0);
    
    s.push({nodeinfo[0][1],nodeinfo[0][2]});
    
    for(int i = 1 ; i < nodeinfo.size(); ++i)
    {
        int y = nodeinfo[i][1];
        int node = nodeinfo[i][2];
        
        if(s.top().first > y)
            s.push({y,node});
        else
        {
            while(!s.empty())
            {
                if(s.top().first > y)
                    break;
                
                result.push_back(s.top().second);
                s.pop();
            }
            
            s.push({y,node});
        }
    }
    
    while(!s.empty())
    {
        result.push_back(s.top().second);
        s.pop();
    }
    
    return result;
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
    vector<vector<int>> answer;
    
    for(int i = 0 ; i < nodeinfo.size(); ++i)
        nodeinfo[i].push_back(i+1);
    sort(nodeinfo.begin(),nodeinfo.end(),Compare);
    
    answer.push_back(Preorder(nodeinfo));
    answer.push_back(Postorder(nodeinfo));
    
    return answer;
}#include <string>
#include <vector>
#include <algorithm>
#include <stack>
#include <deque>

using namespace std;

bool Compare(vector<int> a, vector<int> b)
{    
    return a[0] < b[0];
}

vector<int> Preorder(const vector<vector<int>>& nodeinfo)
{
    vector<int> result;
    deque<tuple<int,int,int>> d;
    vector<int> mask(nodeinfo.size()+1, 0);
    
    d.push_front({nodeinfo[0][0],nodeinfo[0][1],nodeinfo[0][2]});
    
    for(int i = 1 ; i < nodeinfo.size(); ++i)
    {
        int x = nodeinfo[i][0];
        int y = nodeinfo[i][1];
        int node = nodeinfo[i][2];
        
        if(get<1>(d.front()) < y)
        {
            d.push_front({x,y,node});
        }
        else
        {
            vector<tuple<int,int,int>> temp;
            
            while(!d.empty())
            {                
                if(get<1>(d.back()) >= y)
                    break;
                
                if(!(get<0>(d.front()) < get<0>(d.back()) && get<0>(d.back()) < x))
                    break;
                
                if(mask[get<2>(d.back())] >= y)
                    break;
                
                temp.push_back(d.back());
                d.pop_back();
            }
            d.push_back({x,y,node});
            
            for(int i = temp.size()-1 ; i >= 0 ; --i)
            {
                mask[get<2>(temp[i])] = y;
                d.push_back(temp[i]);
            }
        }
    }
    
    while(!d.empty())
    {
        result.push_back(get<2>(d.front()));
        d.pop_front();        
    }
    
    return result;
}
vector<int> Postorder(const vector<vector<int>>& nodeinfo)
{
    vector<int> result;
    stack<pair<int, int>> s;
    vector<int> mask(nodeinfo.size()+1, 0);
    
    s.push({nodeinfo[0][1],nodeinfo[0][2]});
    
    for(int i = 1 ; i < nodeinfo.size(); ++i)
    {
        int y = nodeinfo[i][1];
        int node = nodeinfo[i][2];
        
        if(s.top().first > y)
            s.push({y,node});
        else
        {
            while(!s.empty())
            {
                if(s.top().first > y)
                    break;
                
                result.push_back(s.top().second);
                s.pop();
            }
            
            s.push({y,node});
        }
    }
    
    while(!s.empty())
    {
        result.push_back(s.top().second);
        s.pop();
    }
    
    return result;
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
    vector<vector<int>> answer;
    
    for(int i = 0 ; i < nodeinfo.size(); ++i)
        nodeinfo[i].push_back(i+1);
    sort(nodeinfo.begin(),nodeinfo.end(),Compare);
    
    answer.push_back(Preorder(nodeinfo));
    answer.push_back(Postorder(nodeinfo));
    
    return answer;
}